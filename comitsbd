1. 
DELIMITER //
CREATE PROCEDURE sp_ListarAutores()
BEGIN
    SELECT * FROM Autor;
END //
DELIMITER ;
CALL sp_ListarAutores();

2. 
DELIMITER //
CREATE PROCEDURE sp_LivrosPorCategoria(IN categoriaNome VARCHAR(100))
BEGIN
    SELECT Livro.Titulo, Autor.Nome AS NomeAutor, Autor.Sobrenome AS SobrenomeAutor
    FROM Livro
    INNER JOIN Categoria ON Livro.Categoria_ID = Categoria.Categoria_ID
    INNER JOIN Autor_Livro ON Livro.Livro_ID = Autor_Livro.Livro_ID
    INNER JOIN Autor ON Autor_Livro.Autor_ID = Autor.Autor_ID
    WHERE Categoria.Nome = categoriaNome;
END //
DELIMITER ;
CALL sp_LivrosPorCategoria('História');
CALL sp_LivrosPorCategoria('Autoajuda');

3. 
DELIMITER //
CREATE PROCEDURE sp_ContarLivrosPorCategoria(IN categoriaNome VARCHAR(100), OUT totalLivros INT)
BEGIN
    SELECT COUNT(*) INTO totalLivros
    FROM Livro
    WHERE Categoria_ID = (SELECT Categoria_ID FROM Categoria WHERE Nome = categoriaNome);
END //
DELIMITER ;
CALL sp_ContarLivrosPorCategoria('Romance', @total);
SELECT @total;

4. 
DELIMITER //
CREATE PROCEDURE sp_VerificarLivrosCategoria(IN categoriaNome VARCHAR(100), OUT possuiLivros BOOLEAN)
BEGIN
    DECLARE categoriaID INT;
    SELECT Categoria_ID INTO categoriaID
    FROM Categoria
    WHERE Nome = categoriaNome
    LIMIT 1;
    IF categoriaID IS NOT NULL THEN
        SELECT COUNT(*) INTO possuiLivros
        FROM Livro
        WHERE Categoria_ID = categoriaID;
    ELSE
        SET possuiLivros = FALSE;
    END IF;
END//
DELIMITER ;
CALL sp_VerificarLivrosCategoria('Romance', @possuiLivros);
SELECT @possuiLivros;

5. 
DELIMITER //
CREATE PROCEDURE sp_LivrosAteAno(IN anoEspecifico INT)
BEGIN
    SELECT
        Livro.Titulo,
        Autor.Nome AS NomeAutor,
        Autor.Sobrenome AS SobrenomeAutor,
        Livro.Ano_Publicacao
    FROM
        Livro
    JOIN
        Autor_Livro ON Livro.Livro_ID = Autor_Livro.Livro_ID
    JOIN
        Autor ON Autor_Livro.Autor_ID = Autor.Autor_ID
    WHERE
        Livro.Ano_Publicacao <= anoEspecifico;
END//
DELIMITER ;
CALL sp_LivrosAteAno(2010);

6. 
DELIMITER //
CREATE PROCEDURE sp_TitulosPorCategoria(IN categoriaNome VARCHAR(100))
BEGIN
    SELECT Livro.Titulo
    FROM Livro
    JOIN Categoria ON Livro.Categoria_ID = Categoria.Categoria_ID
    WHERE Categoria.Nome = categoriaNome;
END//
DELIMITER ;
CALL sp_TitulosPorCategoria('História');

7. 
DELIMITER //
CREATE PROCEDURE sp_AdicionarLivro(
    IN tituloLivro VARCHAR(255),
    IN editoraID INT,
    IN anoPublicacao INT,
    IN numeroPaginas INT,
    IN categoriaID INT
)
BEGIN
    INSERT INTO Livro (Titulo, Editora_ID, Ano_Publicacao, Numero_Paginas, Categoria_ID)
    VALUES (tituloLivro, editoraID, anoPublicacao, numeroPaginas, categoriaID);
END//
DELIMITER ;
CALL sp_AdicionarLivro('Novo Livro', 1, 2023, 250, 1);

8. 
DELIMITER //
CREATE PROCEDURE sp_AutorMaisAntigo(OUT nomeAutorMaisAntigo VARCHAR(255))
BEGIN
    SELECT CONCAT(Nome, ' ', Sobrenome) INTO nomeAutorMaisAntigo
    FROM Autor
    WHERE Data_Nascimento = (SELECT MIN(Data_Nascimento) FROM Autor);
END//
DELIMITER ;
CALL sp_AutorMaisAntigo(@nomeAutorMaisAntigo);
SELECT @nomeAutorMaisAntigo;

9. 
DELIMITER //FAZ COM QUE O MYSQL CONSIGA RECONHECER O BLOCO COMPLETO DO CODIGO.
CREATE PROCEDURE sp_ListarAutores() INICIOU A STORED , NAO TEM PARAMETROS
BEGIN INICIOU UM BLOCO
    SELECT * FROM Autor; ESTA LISTANDO TODOS OS AUTORES
END // TERMINA O BLLOCO 
DELIMITER ; TERMINA ESSE BLOCO DE CODIGO AGORA O ; VOLTA A SER O "FINALIZADOR"
CALL sp_ListarAutores(); ESTA CHAMANDO A STORED.

10. 
DELIMITER //
CREATE PROCEDURE sp_LivrosESeusAutores()
BEGIN
    SELECT
        Livro.Titulo,
        CONCAT(Autor.Nome, ' ', Autor.Sobrenome) AS NomeAutor
    FROM
        Livro
    JOIN
        Autor_Livro ON Livro.Livro_ID = Autor_Livro.Livro_ID
    JOIN
        Autor ON Autor_Livro.Autor_ID = Autor.Autor_ID;
END//
DELIMITER ;
CALL sp_LivrosESeusAutores();
